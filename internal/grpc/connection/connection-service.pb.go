// Code generated by protoc-gen-go. DO NOT EDIT.
// source: connection-service.proto

package connection

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Connection struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Connection) Reset()         { *m = Connection{} }
func (m *Connection) String() string { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()    {}
func (*Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f86ad761877d5c, []int{0}
}

func (m *Connection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Connection.Unmarshal(m, b)
}
func (m *Connection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Connection.Marshal(b, m, deterministic)
}
func (m *Connection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connection.Merge(m, src)
}
func (m *Connection) XXX_Size() int {
	return xxx_messageInfo_Connection.Size(m)
}
func (m *Connection) XXX_DiscardUnknown() {
	xxx_messageInfo_Connection.DiscardUnknown(m)
}

var xxx_messageInfo_Connection proto.InternalMessageInfo

func (m *Connection) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Connection) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Connection) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type ClickResponse struct {
	Click                *Click      `protobuf:"bytes,1,opt,name=click,proto3" json:"click,omitempty"`
	Connection           *Connection `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
	Error                *Error      `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ClickResponse) Reset()         { *m = ClickResponse{} }
func (m *ClickResponse) String() string { return proto.CompactTextString(m) }
func (*ClickResponse) ProtoMessage()    {}
func (*ClickResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f86ad761877d5c, []int{1}
}

func (m *ClickResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickResponse.Unmarshal(m, b)
}
func (m *ClickResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickResponse.Marshal(b, m, deterministic)
}
func (m *ClickResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickResponse.Merge(m, src)
}
func (m *ClickResponse) XXX_Size() int {
	return xxx_messageInfo_ClickResponse.Size(m)
}
func (m *ClickResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClickResponse proto.InternalMessageInfo

func (m *ClickResponse) GetClick() *Click {
	if m != nil {
		return m.Click
	}
	return nil
}

func (m *ClickResponse) GetConnection() *Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *ClickResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ClickData struct {
	Id                   int64       `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Click                *Click      `protobuf:"bytes,2,opt,name=click,proto3" json:"click,omitempty"`
	Connection           *Connection `protobuf:"bytes,3,opt,name=connection,proto3" json:"connection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ClickData) Reset()         { *m = ClickData{} }
func (m *ClickData) String() string { return proto.CompactTextString(m) }
func (*ClickData) ProtoMessage()    {}
func (*ClickData) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f86ad761877d5c, []int{2}
}

func (m *ClickData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickData.Unmarshal(m, b)
}
func (m *ClickData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickData.Marshal(b, m, deterministic)
}
func (m *ClickData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickData.Merge(m, src)
}
func (m *ClickData) XXX_Size() int {
	return xxx_messageInfo_ClickData.Size(m)
}
func (m *ClickData) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickData.DiscardUnknown(m)
}

var xxx_messageInfo_ClickData proto.InternalMessageInfo

func (m *ClickData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ClickData) GetClick() *Click {
	if m != nil {
		return m.Click
	}
	return nil
}

func (m *ClickData) GetConnection() *Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

type Error struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f86ad761877d5c, []int{3}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ClickSummary struct {
	// number of clicks received.
	ClickCount           int32    `protobuf:"varint,1,opt,name=click_count,json=clickCount,proto3" json:"click_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickSummary) Reset()         { *m = ClickSummary{} }
func (m *ClickSummary) String() string { return proto.CompactTextString(m) }
func (*ClickSummary) ProtoMessage()    {}
func (*ClickSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_80f86ad761877d5c, []int{4}
}

func (m *ClickSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickSummary.Unmarshal(m, b)
}
func (m *ClickSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickSummary.Marshal(b, m, deterministic)
}
func (m *ClickSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickSummary.Merge(m, src)
}
func (m *ClickSummary) XXX_Size() int {
	return xxx_messageInfo_ClickSummary.Size(m)
}
func (m *ClickSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickSummary.DiscardUnknown(m)
}

var xxx_messageInfo_ClickSummary proto.InternalMessageInfo

func (m *ClickSummary) GetClickCount() int32 {
	if m != nil {
		return m.ClickCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Connection)(nil), "connection.Connection")
	proto.RegisterType((*ClickResponse)(nil), "connection.ClickResponse")
	proto.RegisterType((*ClickData)(nil), "connection.ClickData")
	proto.RegisterType((*Error)(nil), "connection.Error")
	proto.RegisterType((*ClickSummary)(nil), "connection.ClickSummary")
}

func init() { proto.RegisterFile("connection-service.proto", fileDescriptor_80f86ad761877d5c) }

var fileDescriptor_80f86ad761877d5c = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x25, 0xa9, 0x55, 0x32, 0xf5, 0x83, 0x2e, 0x28, 0xb1, 0x17, 0x4b, 0x2e, 0xf6, 0x62, 0x0b,
	0x15, 0xbd, 0x79, 0xb1, 0x15, 0xe9, 0x75, 0x73, 0xf3, 0x22, 0x71, 0x33, 0xd4, 0xa2, 0xdd, 0x8d,
	0xbb, 0x1b, 0x41, 0xf0, 0x8f, 0x88, 0x7f, 0x56, 0x76, 0xb6, 0x4d, 0xaa, 0x41, 0xd0, 0xdb, 0xe4,
	0xbd, 0xc9, 0x7b, 0x6f, 0x66, 0x16, 0x62, 0xa1, 0xa4, 0x44, 0x61, 0x17, 0x4a, 0x9e, 0x19, 0xd4,
	0xaf, 0x0b, 0x81, 0xc3, 0x42, 0x2b, 0xab, 0x18, 0xd4, 0x4c, 0xaf, 0x23, 0x9e, 0x17, 0xe2, 0xc9,
	0x13, 0xc9, 0x14, 0x60, 0x52, 0x51, 0x6c, 0x1f, 0xc2, 0x59, 0x1e, 0x07, 0xfd, 0x60, 0xd0, 0xe2,
	0xe1, 0x2c, 0x67, 0x0c, 0xb6, 0x1e, 0x95, 0xb1, 0x71, 0xd8, 0x0f, 0x06, 0x11, 0xa7, 0xda, 0x61,
	0x85, 0xd2, 0x36, 0x6e, 0x79, 0xcc, 0xd5, 0xc9, 0x47, 0x00, 0x7b, 0x13, 0xa7, 0xca, 0xd1, 0x14,
	0x4a, 0x1a, 0x64, 0xa7, 0xd0, 0x26, 0x1b, 0x12, 0xeb, 0x8c, 0xbb, 0xc3, 0x3a, 0xc0, 0xd0, 0x77,
	0x7a, 0x9e, 0x5d, 0xc2, 0x46, 0x36, 0x32, 0xea, 0x8c, 0x8f, 0xbe, 0x75, 0x57, 0x25, 0xdf, 0xe8,
	0x74, 0x06, 0xa8, 0xb5, 0xd2, 0x94, 0xe3, 0x87, 0xc1, 0x8d, 0x23, 0xb8, 0xe7, 0x93, 0x77, 0x88,
	0xc8, 0x70, 0x9a, 0xd9, 0xac, 0x31, 0x60, 0x15, 0x33, 0xfc, 0x57, 0xcc, 0xd6, 0x5f, 0x63, 0x26,
	0x17, 0xd0, 0xa6, 0x34, 0x6e, 0x6d, 0x42, 0xe5, 0x48, 0xde, 0x11, 0xa7, 0x9a, 0xc5, 0xb0, 0xb3,
	0x44, 0x63, 0xb2, 0x39, 0xae, 0x36, 0xbc, 0xfe, 0x4c, 0x46, 0xb0, 0x4b, 0xf6, 0x69, 0xb9, 0x5c,
	0x66, 0xfa, 0x8d, 0x9d, 0x80, 0xbf, 0xda, 0xbd, 0x50, 0xa5, 0xb4, 0x24, 0xd2, 0xe6, 0x40, 0xd0,
	0xc4, 0x21, 0xe3, 0xcf, 0x00, 0xba, 0x75, 0x84, 0xd4, 0x1f, 0x9f, 0x5d, 0x41, 0x94, 0xa2, 0xcc,
	0x49, 0x8a, 0x1d, 0x36, 0x86, 0x73, 0x2b, 0xe9, 0x1d, 0x37, 0x67, 0x5e, 0x1f, 0xf1, 0x16, 0x58,
	0xf5, 0xbb, 0x49, 0xf1, 0xa5, 0x44, 0x29, 0xf0, 0x37, 0x9d, 0xb8, 0x01, 0xaf, 0xc2, 0x0f, 0x82,
	0xeb, 0xee, 0xdd, 0xc1, 0x5c, 0x17, 0x62, 0x54, 0x77, 0x3c, 0x6c, 0xd3, 0xfb, 0x3b, 0xff, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0x7a, 0x3e, 0xa2, 0xab, 0xb4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnectionServiceClient is the client API for ConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectionServiceClient interface {
	// A simple RPC.
	SendClick(ctx context.Context, in *ClickData, opts ...grpc.CallOption) (*ClickResponse, error)
	// A client-to-server streaming RPC.
	SendClicksSequence(ctx context.Context, opts ...grpc.CallOption) (ConnectionService_SendClicksSequenceClient, error)
}

type connectionServiceClient struct {
	cc *grpc.ClientConn
}

func NewConnectionServiceClient(cc *grpc.ClientConn) ConnectionServiceClient {
	return &connectionServiceClient{cc}
}

func (c *connectionServiceClient) SendClick(ctx context.Context, in *ClickData, opts ...grpc.CallOption) (*ClickResponse, error) {
	out := new(ClickResponse)
	err := c.cc.Invoke(ctx, "/connection.ConnectionService/SendClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) SendClicksSequence(ctx context.Context, opts ...grpc.CallOption) (ConnectionService_SendClicksSequenceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConnectionService_serviceDesc.Streams[0], "/connection.ConnectionService/SendClicksSequence", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectionServiceSendClicksSequenceClient{stream}
	return x, nil
}

type ConnectionService_SendClicksSequenceClient interface {
	Send(*ClickData) error
	CloseAndRecv() (*ClickSummary, error)
	grpc.ClientStream
}

type connectionServiceSendClicksSequenceClient struct {
	grpc.ClientStream
}

func (x *connectionServiceSendClicksSequenceClient) Send(m *ClickData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectionServiceSendClicksSequenceClient) CloseAndRecv() (*ClickSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClickSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectionServiceServer is the server API for ConnectionService service.
type ConnectionServiceServer interface {
	// A simple RPC.
	SendClick(context.Context, *ClickData) (*ClickResponse, error)
	// A client-to-server streaming RPC.
	SendClicksSequence(ConnectionService_SendClicksSequenceServer) error
}

// UnimplementedConnectionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConnectionServiceServer struct {
}

func (*UnimplementedConnectionServiceServer) SendClick(ctx context.Context, req *ClickData) (*ClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClick not implemented")
}
func (*UnimplementedConnectionServiceServer) SendClicksSequence(srv ConnectionService_SendClicksSequenceServer) error {
	return status.Errorf(codes.Unimplemented, "method SendClicksSequence not implemented")
}

func RegisterConnectionServiceServer(s *grpc.Server, srv ConnectionServiceServer) {
	s.RegisterService(&_ConnectionService_serviceDesc, srv)
}

func _ConnectionService_SendClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).SendClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connection.ConnectionService/SendClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).SendClick(ctx, req.(*ClickData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_SendClicksSequence_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectionServiceServer).SendClicksSequence(&connectionServiceSendClicksSequenceServer{stream})
}

type ConnectionService_SendClicksSequenceServer interface {
	SendAndClose(*ClickSummary) error
	Recv() (*ClickData, error)
	grpc.ServerStream
}

type connectionServiceSendClicksSequenceServer struct {
	grpc.ServerStream
}

func (x *connectionServiceSendClicksSequenceServer) SendAndClose(m *ClickSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectionServiceSendClicksSequenceServer) Recv() (*ClickData, error) {
	m := new(ClickData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ConnectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connection.ConnectionService",
	HandlerType: (*ConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendClick",
			Handler:    _ConnectionService_SendClick_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendClicksSequence",
			Handler:       _ConnectionService_SendClicksSequence_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "connection-service.proto",
}
